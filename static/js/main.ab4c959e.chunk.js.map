{"version":3,"sources":["Circle.js","circles.js","GameOverPopUp.js","assets/sounds/stop.mp3","assets/sounds/start.mp3","assets/sounds/Mouse-Click.mp3","App.js","index.js"],"names":["Circle","props","style","backgroundColor","color","pointerEvents","disabled","className","active","onClick","click","circles","id","GameOverPopUp","score","close","startSound","Audio","gameStartSound","gameEndSound","stopSound","clickSound","mouseClickSound","getRndInteger","min","max","Math","floor","random","App","state","current","gameOver","pace","rounds","didGameStart","timer","undefined","clickHandler","play","console","log","setState","stopHandler","nextCircle","nextActive","setTimeout","startHandler","pause","clearTimeout","closeHandler","this","map","c","Component","ReactDOM","render","document","getElementById"],"mappings":"wOAeeA,EAbA,SAACC,GACd,OACE,qBACEC,MAAO,CACLC,gBAAiBF,EAAMG,MACvBC,cAAeJ,EAAMK,SAAW,OAAS,QAE3CC,UAAS,iBAAYN,EAAMO,OAAS,SAAW,IAC/CC,QAASR,EAAMS,SCVRC,EAAU,CACrB,CAAEC,GAAI,EAAGR,MAAO,SAChB,CAAEQ,GAAI,EAAGR,MAAO,OAChB,CAAEQ,GAAI,EAAGR,MAAO,QAChB,CAAEQ,GAAI,EAAGR,MAAO,UCUHS,EAZO,SAACZ,GACrB,OACE,qBAAKM,UAAU,UAAf,SACE,sBAAKA,UAAU,WAAf,UACE,2CACA,iDAAoBN,EAAMa,SAC1B,wBAAQL,QAASR,EAAMc,MAAvB,qBCRO,MAA0B,iCCA1B,MAA0B,kCCA1B,MAA0B,wCCSrCC,EAAa,IAAIC,MAAMC,GACvBC,EAAe,IAAIF,MAAMG,GACzBC,EAAa,IAAIJ,MAAMK,GACrBC,EAAgB,SAACC,EAAKC,GAC1B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,GAEjDK,E,4MACJC,MAAQ,CACNhB,MAAO,EACPiB,QAAS,EACTC,UAAU,EACVC,KAAM,KACNC,OAAQ,EACRC,cAAc,G,EAEhBC,WAAQC,E,EAERC,aAAe,SAAC1B,GACdS,EAAWkB,OACXC,QAAQC,IAAI,iBAAkB7B,GAC1B,EAAKkB,MAAMC,UAAYnB,EAI3B,EAAK8B,SAAS,CACZ5B,MAAO,EAAKgB,MAAMhB,MAAQ,GAC1BoB,OAAQ,EAAKJ,MAAMI,OAAS,IAL5B,EAAKS,e,EAQTC,WAAa,WACX,GAAI,EAAKd,MAAMI,QAAU,EACvB,EAAKS,kBADP,CAIA,IAAIE,EACJ,GACEA,EAAatB,EAAc,EAAG,SACvBsB,IAAe,EAAKf,MAAMC,SACnC,EAAKW,SAAS,CACZX,QAASc,EACTZ,KAAwB,IAAlB,EAAKH,MAAMG,KACjBC,OAAQ,EAAKJ,MAAMI,OAAS,IAE9BM,QAAQC,IAAI,SAAU,EAAKX,MAAMI,QACjCM,QAAQC,IAAI,oBAAqB,EAAKX,MAAMC,SAC5C,EAAKK,MAAQU,WAAW,EAAKF,WAAY,EAAKd,MAAMG,Q,EAEtDc,aAAe,WACb/B,EAAWuB,OACX,EAAKK,aACL,EAAKF,SAAS,CACZP,cAAc,K,EAGlBQ,YAAc,WACZxB,EAAaoB,OACbvB,EAAWgC,QACX,EAAKN,SAAS,CACZV,UAAU,EACVG,cAAc,IAEhBc,aAAa,EAAKb,Q,EAEpBc,aAAe,WACb,EAAKR,SAAS,CACZV,UAAU,EACVlB,MAAO,EACPiB,QAAS,EACTE,KAAM,KACNC,OAAQ,K,4CAGZ,WAAU,IAAD,OACP,OACE,gCACE,4CAEA,8CAAiBiB,KAAKrB,MAAMhB,SAC5B,gCACE,qBAAKP,UAAU,UAAf,SACGI,EAAQyC,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,CAEEzC,GAAIyC,EAAEzC,GACNR,MAAOiD,EAAEjD,MACTM,MAAO,kBAAM,EAAK4B,aAAae,EAAEzC,KACjCJ,OAAQ,EAAKsB,MAAMC,UAAYsB,EAAEzC,GACjCN,SAAU,EAAKwB,MAAMK,cALhBkB,EAAEzC,SASZuC,KAAKrB,MAAME,UACV,cAAC,EAAD,CAAelB,MAAOqC,KAAKrB,MAAMhB,MAAOC,MAAOoC,KAAKD,eAEtD,sBAAK3C,UAAU,UAAf,UACE,wBACED,SAAU6C,KAAKrB,MAAMK,aACrB1B,QAAS0C,KAAKJ,aAFhB,mBAMA,wBAAQtC,QAAS0C,KAAKR,YAAtB,+B,GA/FMW,aAuGHzB,ICjHf0B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ab4c959e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Circle = (props) => {\n  return (\n    <div\n      style={{\n        backgroundColor: props.color,\n        pointerEvents: props.disabled ? \"auto\" : \"none\",\n      }}\n      className={`circle ${props.active ? \"active\" : \"\"}`}\n      onClick={props.click}\n    ></div>\n  );\n};\n\nexport default Circle;\n","export const circles = [\n  { id: 1, color: \"green\" },\n  { id: 2, color: \"red\" },\n  { id: 3, color: \"blue\" },\n  { id: 4, color: \"brown\" },\n];\n","import React from \"react\";\n\nconst GameOverPopUp = (props) => {\n  return (\n    <div className=\"overlay\">\n      <div className=\"popUpDiv\">\n        <h1>Game over</h1>\n        <p>Your score was: {props.score}</p>\n        <button onClick={props.close}>X</button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameOverPopUp;\n","export default __webpack_public_path__ + \"static/media/stop.9cb0ecc9.mp3\";","export default __webpack_public_path__ + \"static/media/start.7555c0c3.mp3\";","export default __webpack_public_path__ + \"static/media/Mouse-Click.90282a08.mp3\";","import \"./App.css\";\n\nimport React, { Component } from \"react\";\nimport Circle from \"./Circle\";\nimport { circles } from \"./circles\";\nimport GameOverPopUp from \"./GameOverPopUp\";\nimport stopSound from \"./assets/sounds/stop.mp3\";\nimport gameStartSound from \"./assets/sounds/start.mp3\";\nimport mouseClickSound from \"./assets/sounds/Mouse-Click.mp3\";\nlet startSound = new Audio(gameStartSound);\nlet gameEndSound = new Audio(stopSound);\nlet clickSound = new Audio(mouseClickSound);\nconst getRndInteger = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nclass App extends Component {\n  state = {\n    score: 0,\n    current: 0,\n    gameOver: false,\n    pace: 1500,\n    rounds: 0,\n    didGameStart: false,\n  };\n  timer = undefined;\n\n  clickHandler = (id) => {\n    clickSound.play();\n    console.log(\"you clicked on\", id);\n    if (this.state.current !== id) {\n      this.stopHandler();\n      return;\n    }\n    this.setState({\n      score: this.state.score + 10,\n      rounds: this.state.rounds - 1,\n    });\n  };\n  nextCircle = () => {\n    if (this.state.rounds >= 5) {\n      this.stopHandler();\n      return;\n    }\n    let nextActive;\n    do {\n      nextActive = getRndInteger(1, 4);\n    } while (nextActive === this.state.current);\n    this.setState({\n      current: nextActive,\n      pace: this.state.pace * 0.95,\n      rounds: this.state.rounds + 1,\n    });\n    console.log(\"rounds\", this.state.rounds);\n    console.log(\"active circle is \", this.state.current);\n    this.timer = setTimeout(this.nextCircle, this.state.pace);\n  };\n  startHandler = () => {\n    startSound.play();\n    this.nextCircle();\n    this.setState({\n      didGameStart: true,\n    });\n  };\n  stopHandler = () => {\n    gameEndSound.play();\n    startSound.pause();\n    this.setState({\n      gameOver: true,\n      didGameStart: false,\n    });\n    clearTimeout(this.timer);\n  };\n  closeHandler = () => {\n    this.setState({\n      gameOver: false,\n      score: 0,\n      current: 0,\n      pace: 1500,\n      rounds: 0,\n    });\n  };\n  render() {\n    return (\n      <div>\n        <h1>Speed Game</h1>\n\n        <p>Your Score : {this.state.score}</p>\n        <div>\n          <div className=\"circles\">\n            {circles.map((c) => (\n              <Circle\n                key={c.id}\n                id={c.id}\n                color={c.color}\n                click={() => this.clickHandler(c.id)}\n                active={this.state.current === c.id}\n                disabled={this.state.didGameStart}\n              />\n            ))}\n          </div>\n          {this.state.gameOver && (\n            <GameOverPopUp score={this.state.score} close={this.closeHandler} />\n          )}\n          <div className=\"buttons\">\n            <button\n              disabled={this.state.didGameStart}\n              onClick={this.startHandler}\n            >\n              Start\n            </button>\n            <button onClick={this.stopHandler}>Stop</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}